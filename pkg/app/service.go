// Copyright 2022 The ILLA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package app

import (
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/illa-family/builder-backend/internal/repository"

	"go.uber.org/zap"
)

type AppService interface {
	CreateApp(app AppDto) (AppDto, error)
	DeleteApp(appID int) error
	UpdateApp(app AppDto) (AppDto, error)
	GetAllApp() ([]AppDto, error)
	GetAppEditingVersion(appID int) (AppVersionDto, error)
}

type AppServiceImpl struct {
	logger        *zap.SugaredLogger
	appRepository repository.AppRepository
}

type AppDto struct {
	ID              int       `json:"appID"` // generated by database primary key serial
	Name            string    `json:"name" validate:"required"`
	ReleaseVersion  int       `json:"release_version"`  // release version used for mark the app release version.
	MainlineVersion int       `json:"mainline_version"` // mainline version keep the newest app version in database.
	CreatedBy       int       `json:"createdBy" `
	CreatedAt       time.Time `json:"createdAt"`
	UpdatedBy       int       `json:"updatedBy"`
	UpdatedAt       time.Time `json:"updatedAt"`
}

type AppVersionDto struct {
}

func NewAppServiceImpl(logger *zap.SugaredLogger, appRepository repository.AppRepository) *AppServiceImpl {
	return &AppServiceImpl{
		logger:        logger,
		appRepository: appRepository,
	}
}

func (impl *AppServiceImpl) CreateApp(app AppDto) (AppDto, error) {
	// run validate
	validate := validator.New()
	if err := validate.Struct(app); err != nil {
		return AppDto{}, err
	}
	// init
	app.ReleaseVersion = 0 // the draft version will always be 0, so the release version and mainline version are 0 by default when app init.
	app.MainlineVersion = 0
	app.CreatedAt = time.Now().UTC()
	app.UpdatedAt = time.Now().UTC()
	if err := impl.appRepository.Create(&repository.App{
		Name:            app.Name,
		ReleaseVersion:  app.ReleaseVersion,
		MainlineVersion: app.MainlineVersion,
		CreatedBy:       app.CreatedBy,
		CreatedAt:       app.CreatedAt,
		UpdatedBy:       app.UpdatedBy,
		UpdatedAt:       app.UpdatedAt,
	}); err != nil {
		return AppDto{}, err
	}
	return app, nil
}

func (impl *AppServiceImpl) UpdateApp(app AppDto) (AppDto, error) {
	app.UpdatedAt = time.Now().UTC()
	if err := impl.appRepository.Update(&repository.App{
		ID:              app.ID,
		Name:            app.Name,
		ReleaseVersion:  app.ReleaseVersion,
		MainlineVersion: app.MainlineVersion,
		CreatedBy:       app.CreatedBy,
		CreatedAt:       app.CreatedAt,
		UpdatedBy:       app.UpdatedBy,
		UpdatedAt:       app.UpdatedAt,
	}); err != nil {
		return app, err
	}
	return AppDto{}, nil
}

func (impl *AppServiceImpl) DeleteApp(appID int) error {
	return nil
}

func (impl *AppServiceImpl) GetAllApp() ([]AppDto, error) {
	return nil, nil
}

func (impl *AppServiceImpl) GetAppByID() ([]AppDto, error) {
	return nil, nil
}

func (impl *AppServiceImpl) GetAppEditingVersion(appID int) (AppVersionDto, error) {
	return AppVersionDto{}, nil
}

func (impl *AppServiceImpl) ReleaseApp(appID int) (AppDto, error) {
	// bump mainline version id & update release version
	appDto := AppDto{}
	// read app by id
	res, err := impl.appRepository.RetrieveAppByID(appID)
	if err != nil {
		return AppDto{}, err
	}
	// append to appDto
	appDto.ID = res.ID
	appDto.Name = res.Name
	appDto.MainlineVersion = res.MainlineVersion + 1 // bump mainline version
	appDto.ReleaseVersion = appDto.MainlineVersion   // release with mainline version
	appDto.CreatedBy = res.CreatedBy
	appDto.CreatedAt = res.CreatedAt
	appDto.UpdatedBy = res.UpdatedBy
	appDto.UpdatedAt = res.UpdatedAt
	// execute release state process
	ReleaseKVStateByApp(appDto)
	ReleaseTreeStateByApp(appDto)
	// save app
	if err := impl.appRepository.Update(&repository.App{
		ID:              appDto.ID,
		Name:            appDto.Name,
		ReleaseVersion:  appDto.ReleaseVersion,
		MainlineVersion: appDto.MainlineVersion,
		CreatedAt:       appDto.CreatedAt,
		CreatedBy:       appDto.CreatedBy,
		UpdatedAt:       appDto.UpdatedAt,
		UpdatedBy:       appDto.UpdatedBy,
	}); err != nil {
		return AppDto{}, err
	}
	return AppDto{}, nil
}
