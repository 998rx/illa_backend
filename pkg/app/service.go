// Copyright 2022 The ILLA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package app

import (
	"time"

	"github.com/illa-family/builder-backend/internal/repository"

	"go.uber.org/zap"
)

type AppService interface {
	CreateApp(app AppDto) (AppDto, error)
	UpdateApp(app AppDto) (AppDto, error)
	DeleteApp(appID int) error
	GetAllApp() ([]AppDto, error)
	GetAppByID(appID int) (AppDto, error)
	BumpAppVersion(app AppDto)
}

type AppServiceImpl struct {
	logger        *zap.SugaredLogger
	appRepository repository.AppRepository
}

type AppDto struct {
	ID              int       `json:"appID"` // generated by database primary key serial
	Name            string    `json:"appName" validate:"required"`
	ReleaseVersion  int       `json:"release_version"`  // release version used for mark the app release version.
	MainlineVersion int       `json:"mainline_version"` // mainline version keep the newest app version in database.
	CreatedBy       int       `json:"-" `
	CreatedAt       time.Time `json:"-"`
	UpdatedBy       int       `json:"updatedBy"`
	UpdatedAt       time.Time `json:"updatedAt"`
}

func NewAppServiceImpl(logger *zap.SugaredLogger, appRepository repository.AppRepository) *AppServiceImpl {
	return &AppServiceImpl{
		logger:        logger,
		appRepository: appRepository,
	}
}

func (impl *AppServiceImpl) CreateApp(app AppDto) (AppDto, error) {
	// init
	app.ReleaseVersion = 0 // the draft version will always be 0, so the release version and mainline version are 0 by default when app init.
	app.MainlineVersion = 0
	app.CreatedAt = time.Now().UTC()
	app.UpdatedAt = time.Now().UTC()
	if err := impl.appRepository.Create(&repository.App{
		Name:            app.Name,
		ReleaseVersion:  app.ReleaseVersion,
		MainlineVersion: app.MainlineVersion,
		CreatedBy:       app.CreatedBy,
		CreatedAt:       app.CreatedAt,
		UpdatedBy:       app.UpdatedBy,
		UpdatedAt:       app.UpdatedAt,
	}); err != nil {
		return AppDto{}, err
	}
	return app, nil
}

func (impl *AppServiceImpl) UpdateApp(app AppDto) (AppDto, error) {
	app.UpdatedAt = time.Now().UTC()
	if err := impl.appRepository.Update(&repository.App{
		ID:              app.ID,
		Name:            app.Name,
		ReleaseVersion:  app.ReleaseVersion,
		MainlineVersion: app.MainlineVersion,
		CreatedBy:       app.CreatedBy,
		CreatedAt:       app.CreatedAt,
		UpdatedBy:       app.UpdatedBy,
		UpdatedAt:       app.UpdatedAt,
	}); err != nil {
		return app, err
	}
	return AppDto{}, nil
}

func (impl *AppServiceImpl) DeleteApp(appID int) error {
	return impl.appRepository.Delete(appID)
}

func (impl *AppServiceImpl) GetAllApp() ([]AppDto, error) {
	res, err := impl.appRepository.RetrieveAll()
	if err != nil {
		return nil, err
	}
	resDtoSlice := make([]AppDto, 0, len(res))
	for _, value := range res {
		resDtoSlice = append(resDtoSlice, AppDto{
			ID:              value.ID,
			Name:            value.Name,
			ReleaseVersion:  value.ReleaseVersion,
			MainlineVersion: value.MainlineVersion,
			CreatedAt:       value.CreatedAt,
			CreatedBy:       value.CreatedBy,
			UpdatedAt:       value.UpdatedAt,
			UpdatedBy:       value.UpdatedBy,
		})
	}
	return resDtoSlice, nil
}

func (impl *AppServiceImpl) GetAppByID(appID int) (AppDto, error) {
	app, err := impl.appRepository.RetrieveAppByID(appID)
	if err != nil {
		return AppDto{}, err
	}
	appDto := AppDto{
		ID:              app.ID,
		Name:            app.Name,
		ReleaseVersion:  app.ReleaseVersion,
		MainlineVersion: app.MainlineVersion,
		CreatedAt:       app.CreatedAt,
		CreatedBy:       app.CreatedBy,
		UpdatedAt:       app.UpdatedAt,
		UpdatedBy:       app.UpdatedBy,
	}
	return appDto, nil
}

// for release
func (impl *AppServiceImpl) BumpAppVersion(appDto *AppDto) {
	appDto.MainlineVersion += 1                    // bump mainline version
	appDto.ReleaseVersion = appDto.MainlineVersion // release with mainline version
}
